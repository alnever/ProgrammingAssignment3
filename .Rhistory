available.packages()
add2 <- function (x,y) {
x + y
}
add2(3,5)
above10 <- function(vect) {
vect > 10
}
above10(c(1,2,3,10,11,4,5,12))
above10 <- function(vect) {
vect[vect > 10]
}
above10(c(1,2,3,10,11,4,5,12))
aboveN <- function(vect, n) {
use <- vect > n
vect[use]
}
aboveN(c(1,2,3,10,11,4,5,12),5)
aboveN <- function(vect, n = 10) {
use <- vect > n
vect[use]
}
x <- 1:20
abloveN(x)
aboveN(x)
aboveN(x,12)
?mean
formals(above10)
search()
args(power)
make.power <- function(n){
pow <- function(x){
x^n
      }
pow
}
square <- make.power(2)
class(square)
?square
args(square)
qube <- make.power(3)
equal
?equality
?is.equal
?is.equality
identical(square, qube)
square(3)
qube(3)
qube
square
ls(environment(qube))
ls(environment(qube))["n"]
env3 <- ls(environment(qube))
env3$n
env3
get("n", env3)
get("n", environment(qube))
env3 <- environment(qube)
get("n", env3)
env3
class(env3)
env3$n
y <- 10
g <- function(x)
{
y <- 2
x + y
}
f <- function(x)
{
x + y
}
f(1)
g(1)
f(1)
strsplit("Hello world")
strsplit("Hello world", split="")
fact <- factor(strsplit("Hello world",split=""))
fact <- as.factor(strsplit("Hello world",split=""))
s <- strsplit("Hello world", split="")
class(s)
fact <- as.factor(s)
class(s[1])
class(s[[1]])
fact <- as.factor(s[[1]])
fact
fact[d]
fact["d"]
table(fact)
unlist(fact)
unclass(fact)
v <- as.vector(fact)
v
q()
str(lm)
x <- rnorm(100, 2, 4)
str(rnorm)
summary(x)
str(x)
f <- gl(40, 10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
s <- split(airquality, airquality$Month)
str(s)
?dnorm
set.seed(1)
rnorm(10)
?pnorm
x
pmorm(x)
pnorm(x)
qnorm(x)
x
x <- rnorm(100)
pnorm(2, 2)
pnorm(4, 2)
qnorm(2,2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + t
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
x <- rbinom(100, 1, 0.5)
plot(x,y)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
sample(1:10)
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i<-1:n
1/ outer(i-1,i,"+")
}
system.time(hilbert(100))
system.time(hilbert(1000))
system.time(hilbert(10000))
?outer
library(KLM)
library(MKL)
library()
install.packages("MKL")
install.packages("blas")
install.packages("BLAS")
install.packages("ATLAS")
Rprof()
summaryRprof()
hilbert(1000)
summaryRprof()
Rprof()
lm(x ~ y)
?Rprof
Rprof(NULL)
lm(x ~ y)
Rprof(append = TRUE)
lm(x ~ y)
Rprof(NULL)
summaryRprof()
x <- rnorm(1000)
y <- rnorm(1000, 10, 5)
Rprof(append = TRUE)
z <- lm(x ~ y)
Rprof(NULL)
summaryRprof()
Rprof(append = FALSE)
Rprof(append = TRUE))
Rprof(append = TRUE)
z <- lm(x ~ y)
Rprof(append = FALSE)
summaryRprof()
z
class(z)
rm(list = ls())
library(swirl)
swirl()
bye()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips(c(0,1), 100, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, prob = c(0.3, 0.7), replace=TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = .7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100,0,25)
rnorm(10,100,25)
?rpois
rpois(5, lambda = 10)
replicate(100, rpois(5,10))
replicate(100, rpois(5,10)) -> my_pois
my_pois
colMeans(my_pois)
colMeans(my_pois) -> cm
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
play()
head(mtcars)
nxt()
?boxplot()
?boxplot
boxplot(formula = mtcars$mpg ~ mtcars$cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
mtcars
data(cars)
ls()
set.seed(1)
rpois(5, 2)
?set.seed
?rpois
?rnorm
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
rm(list = ls())
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
ls
ls()
?rep
dir
dir()
rm(list = ls())
d <- read.cvslibrary(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
read.cvs("outcome-of-care-measures.csv")
read.csv("outcome-of-care-measures.csv")
d <- read.csv("outcome-of-care-measures.csv")
head(d)
str(d)
min(d[,11])
min(d[[11]])
class(d)
class(d[11])
class(d[[11]])
as.vector(d[[11]]) -> v
v
as.numeric(v)->nv
nv
min(nv, rm.na = TRUE)
min(nv, na.rm = TRUE)
dd <- data.frame(d[2], d[7], as.numeric(as.vector(d[[11]])))
head(dd)
min(dd[dd[[2]]='TX',3], na.rm = TRUE)
min(dd[dd[[2]]=='TX',3], na.rm = TRUE)
min(dd[dd[[2]]=='TX',3], na.rm = TRUE) -> mm
dd[dd[[3]] == mm,1]
dd[dd[[3]] == mm & ,]
dd[dd[[3]] == mm,]
dd[dd[3] == mm,]
ddd <- complete.cases(dd)
head(ddd)
head(d)
head(dd)
complete.cases(dd)
?complete.cases
dd
dd[,min(dd[[3]], na.rm = TRUE)]
dd[,min(dd[[2]], na.rm = TRUE)]
class(dd[2])
class(dd[[2]])
dd[,min(as.vector(dd[[2]]), na.rm = TRUE)]
as.vector(dd[[2]])) 
as.vector(dd[[2]])
as.vector(dd[[3]])
dd[,min(as.vector(dd[[3]]), na.rm = TRUE)]
dd[,as.vector(dd[[3]]) == min(as.vector(dd[[3]]), na.rm = TRUE)]
dd[as.vector(dd[[3]]) == min(as.vector(dd[[3]]), na.rm = TRUE),]
dd[as.vector(dd[[3]]) == min(as.vector(dd[[3]]), na.rm = TRUE),] -> r
head(r)
head(dd)
complete.cases(dd)
complete.cases(dd) -> ok
dd[ok]
dd[ok,]
dd[ok,] -> r
dd[dd[[3]] == min(dd[[3]]),]
dd[dd[[3]] == min(dd[[3]]),]
r[r[[3]] == min(r[[3]]),]
r[r[[3]] == max(r[[3]]),]
r[r[[3]] == max(r[[3]]) & r[[2]] = "TX",]
r[r[[3]] == max(r[[3]]) & r[[2]] == "TX",]
r[r[[2]] == "TX",]
r[r[[2]] == "TX",] -> tx
r[r[[3]] == max(tx[[3]]) & r[[2]] == "TX",]
r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",]
r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][1]
r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][1] -> name
name
as.character(r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][1]) -> name
name
r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][[1]] -> name
name
class(name)
r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][1] -> name
class(name)
r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][1,1] -> name
name
as.character(r[r[[3]] == min(tx[[3]]) & r[[2]] == "TX",][1,1]) -> name
name
outcome <- 11
d <- data.frame(d[,c(2,7,outcome)])
d
d <- data.frame(d[,c(2,7), as.numeric(as.vector(d[,outcome]))])
d <- data.frame(d[,c(2,7)], as.numeric(as.vector(d[,outcome])))
d[,c(2,7)]
d <- read.csv("outcome-of-care-measures.csv")
d <- data.frame(d[,c(2,7)], as.numeric(as.vector(d[,outcome])))
      ok <- complete.cases(d)
d <- d[ok,]
d
source("pr_asg_3.R")
source("pr_asg_3.R")
best("TX", "heart attack")
?warning
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("pr_asg_3.R")
source("pr_asg_3.R")
source("pr_asg_3.R")
source("pr_asg_3.R")
best("NY", "hert attack")
source("pr_asg_3.R")
best("NY", "heart attack")
best("MD", "pneumonia")
source("pr_asg_3.R")
best("MD", "pneumonia")
source("pr_asg_3.R")
best("BB", "heart attack")
source("pr_asg_3.R")
best("BB", "heart attack")
source("pr_asg_3.R")
best("BB", "heart attack")
source("pr_asg_3.R")
best("BB", "heart attack")
?data.frame
?message
source("pr_asg_3.R")
best("BB", "heart attack")
source("pr_asg_3.R")
best("BB", "heart attack")
source("pr_asg_3.R")
best("BB", "heart attack")
q()
